openapi: 3.0.1
info:
  title: Greeter Microservice
  description: Microservice for greeting people
  contact:
    name: Marc Kohaupt
    url: http://debuglevel.de
  license:
    name: Unlicense
    url: https://unlicense.org/
  version: "0.1"
paths:
  /graphs:
    get:
      tags:
      - graphs
      summary: Get all graphs
      description: Get all graphs
      operationId: getAllGraphs
      parameters: []
      responses:
        "200":
          description: All graphs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetGraphResponse'
    post:
      tags:
      - graphs
      summary: Create a graph.
      description: Create a graph.
      operationId: postOneGraph
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
              - addGraphRequest
              type: object
              properties:
                addGraphRequest:
                  $ref: '#/components/schemas/AddGraphRequest'
        required: true
      responses:
        "200":
          description: A graph with their ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddGraphResponse'
    delete:
      tags:
      - graphs
      summary: Delete all graph.
      description: Delete all graph.
      operationId: deleteAllGraphs
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
  /graphs/{id}:
    get:
      tags:
      - graphs
      summary: Get a graph
      description: Get a graph
      operationId: getOneGraph
      parameters:
      - name: id
        in: path
        description: ID of the graph
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: A graph
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGraphResponse'
    delete:
      tags:
      - graphs
      summary: Delete a graph.
      description: Delete a graph.
      operationId: deleteOneGraph
      parameters:
      - name: id
        in: path
        description: ID of the graph
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
  /graphs/{id}/renderings:
    get:
      tags:
      - graphs
      summary: Get rendered graph
      description: Get rendered graph
      operationId: getOneGraphRender
      parameters:
      - name: id
        in: path
        description: ID of the graph
        required: true
        schema:
          type: string
          format: uuid
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Format'
      responses:
        "200":
          description: A graph rendering
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: byte
components:
  schemas:
    AddEdgeRequest:
      required:
      - endVertexId
      - startVertexId
      type: object
      properties:
        startVertexId:
          type: string
        endVertexId:
          type: string
    AddGraphRequest:
      required:
      - edges
      - label
      - transitiveReduction
      - vertices
      type: object
      properties:
        label:
          type: string
        vertices:
          type: array
          items:
            $ref: '#/components/schemas/AddVertexRequest'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/AddEdgeRequest'
        transitiveReduction:
          type: boolean
    AddGraphResponse:
      required:
      - id
      - label
      type: object
      properties:
        id:
          type: string
          format: uuid
        label:
          type: string
    AddVertexRequest:
      required:
      - color
      - id
      - label
      - shape
      - tooltip
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        color:
          $ref: '#/components/schemas/Color'
        shape:
          $ref: '#/components/schemas/Shape'
        tooltip:
          type: string
    Color:
      type: string
      enum:
      - Green
      - Red
      - Yellow
      - Blue
      - Gray
    Format:
      type: string
      enum:
      - PNG
      - SVG
      - SVG_WITHOUT_XML_HEADER
      - DOT
    GetEdgeResponse:
      required:
      - endVertexId
      - startVertexId
      type: object
      properties:
        startVertexId:
          type: string
        endVertexId:
          type: string
    GetGraphResponse:
      required:
      - edges
      - id
      - label
      - transitiveReduction
      - vertices
      type: object
      properties:
        id:
          type: string
          format: uuid
        label:
          type: string
        vertices:
          type: array
          items:
            $ref: '#/components/schemas/GetVertexResponse'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/GetEdgeResponse'
        transitiveReduction:
          type: boolean
    GetVertexResponse:
      required:
      - color
      - id
      - label
      - shape
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        color:
          $ref: '#/components/schemas/Color'
        shape:
          $ref: '#/components/schemas/Shape'
    Shape:
      type: string
      enum:
      - Ellipse
      - Rectangle
    Unit:
      type: object
